// <auto-generated />
using System;
using MedPro.Models.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedPro.Migrations
{
    [DbContext(typeof(medProDBContext))]
    partial class medProDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MedPro.Models.EF.Appointment", b =>
                {
                    b.Property<int>("ApptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("apptId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApptId"), 1L, 1);

                    b.Property<int>("DocId")
                        .HasColumnType("int")
                        .HasColumnName("docId");

                    b.Property<int>("PId")
                        .HasColumnType("int")
                        .HasColumnName("pId");

                    b.Property<int>("TimeId")
                        .HasColumnType("int")
                        .HasColumnName("timeId");

                    b.HasKey("ApptId")
                        .HasName("pk_apptId");

                    b.HasIndex("DocId");

                    b.HasIndex("PId");

                    b.HasIndex("TimeId");

                    b.ToTable("appointments", (string)null);
                });

            modelBuilder.Entity("MedPro.Models.EF.Availability", b =>
                {
                    b.Property<int>("AvailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("availId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AvailId"), 1L, 1);

                    b.Property<int>("DocId")
                        .HasColumnType("int")
                        .HasColumnName("docId");

                    b.Property<int>("TimeId")
                        .HasColumnType("int")
                        .HasColumnName("timeId");

                    b.HasKey("AvailId")
                        .HasName("pk_availId");

                    b.HasIndex("DocId");

                    b.HasIndex("TimeId");

                    b.ToTable("availability", (string)null);
                });

            modelBuilder.Entity("MedPro.Models.EF.Doctor", b =>
                {
                    b.Property<int>("DocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("docId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocId"), 1L, 1);

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("DocId")
                        .HasName("pk_docId");

                    b.HasIndex("UserId");

                    b.ToTable("doctors", (string)null);
                });

            modelBuilder.Entity("MedPro.Models.EF.Doctorservice", b =>
                {
                    b.Property<int>("DsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("dsId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DsId"), 1L, 1);

                    b.Property<int>("DocId")
                        .HasColumnType("int")
                        .HasColumnName("docId");

                    b.Property<int>("SId")
                        .HasColumnType("int")
                        .HasColumnName("sId");

                    b.HasKey("DsId")
                        .HasName("pk_dsId");

                    b.HasIndex("DocId");

                    b.HasIndex("SId");

                    b.ToTable("doctorservices", (string)null);
                });

            modelBuilder.Entity("MedPro.Models.EF.Patient", b =>
                {
                    b.Property<int>("PId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PId"), 1L, 1);

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("PId")
                        .HasName("pk_pId");

                    b.HasIndex("UserId");

                    b.ToTable("patients", (string)null);
                });

            modelBuilder.Entity("MedPro.Models.EF.Service", b =>
                {
                    b.Property<int>("SId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SId"), 1L, 1);

                    b.Property<string>("SName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sName");

                    b.Property<int>("TimeNeeded")
                        .HasColumnType("int")
                        .HasColumnName("timeNeeded");

                    b.HasKey("SId")
                        .HasName("pk_sId");

                    b.ToTable("services", (string)null);
                });

            modelBuilder.Entity("MedPro.Models.EF.Time", b =>
                {
                    b.Property<int>("TimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("timeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeId"), 1L, 1);

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime")
                        .HasColumnName("timeEnd");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime")
                        .HasColumnName("timeStart");

                    b.HasKey("TimeId");

                    b.ToTable("times", (string)null);
                });

            modelBuilder.Entity("MedPro.Models.EF.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("lastName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.HasKey("UserId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("MedPro.Models.EF.Appointment", b =>
                {
                    b.HasOne("MedPro.Models.EF.Doctor", "Doc")
                        .WithMany("Appointments")
                        .HasForeignKey("DocId")
                        .IsRequired()
                        .HasConstraintName("fk_apptDocId");

                    b.HasOne("MedPro.Models.EF.Patient", "PIdNavigation")
                        .WithMany("Appointments")
                        .HasForeignKey("PId")
                        .IsRequired()
                        .HasConstraintName("fk_apptPId");

                    b.HasOne("MedPro.Models.EF.Time", "Time")
                        .WithMany("Appointments")
                        .HasForeignKey("TimeId")
                        .IsRequired()
                        .HasConstraintName("fk_apptTimeId");

                    b.Navigation("Doc");

                    b.Navigation("PIdNavigation");

                    b.Navigation("Time");
                });

            modelBuilder.Entity("MedPro.Models.EF.Availability", b =>
                {
                    b.HasOne("MedPro.Models.EF.Doctor", "Doc")
                        .WithMany("Availabilities")
                        .HasForeignKey("DocId")
                        .IsRequired()
                        .HasConstraintName("fk_availDocId");

                    b.HasOne("MedPro.Models.EF.Time", "Time")
                        .WithMany("Availabilities")
                        .HasForeignKey("TimeId")
                        .IsRequired()
                        .HasConstraintName("fk_availTimeId");

                    b.Navigation("Doc");

                    b.Navigation("Time");
                });

            modelBuilder.Entity("MedPro.Models.EF.Doctor", b =>
                {
                    b.HasOne("MedPro.Models.EF.User", "User")
                        .WithMany("Doctors")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_docUserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedPro.Models.EF.Doctorservice", b =>
                {
                    b.HasOne("MedPro.Models.EF.Doctor", "Doc")
                        .WithMany("Doctorservices")
                        .HasForeignKey("DocId")
                        .IsRequired()
                        .HasConstraintName("fk_dsDocId");

                    b.HasOne("MedPro.Models.EF.Service", "SIdNavigation")
                        .WithMany("Doctorservices")
                        .HasForeignKey("SId")
                        .IsRequired()
                        .HasConstraintName("fk_dsSId");

                    b.Navigation("Doc");

                    b.Navigation("SIdNavigation");
                });

            modelBuilder.Entity("MedPro.Models.EF.Patient", b =>
                {
                    b.HasOne("MedPro.Models.EF.User", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_pUserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedPro.Models.EF.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Availabilities");

                    b.Navigation("Doctorservices");
                });

            modelBuilder.Entity("MedPro.Models.EF.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("MedPro.Models.EF.Service", b =>
                {
                    b.Navigation("Doctorservices");
                });

            modelBuilder.Entity("MedPro.Models.EF.Time", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Availabilities");
                });

            modelBuilder.Entity("MedPro.Models.EF.User", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
